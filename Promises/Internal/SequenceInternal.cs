using System; using System.Collections.Generic;  namespace Proto.Promises {     partial class Promise     {         partial class InternalProtected         {             public static Promise CreateSequence<TEnumerator>(TEnumerator promiseFuncs) where TEnumerator : IEnumerator<Func<Promise>>             {                 ValidateArgument(promiseFuncs, "promiseFuncs", 2);                  if (!promiseFuncs.MoveNext())                 {                     return Resolved();                 }

                // Invoke funcs async and normalize the progress.
                var newPromise = PromiseResolvePromise<DelegateVoidPromise>.GetOrCreate();                 newPromise.resolver = new DelegateVoidPromise(promiseFuncs.Current);                 newPromise._valueOrPrevious = Internal.ResolveContainerVoid.GetOrCreate();                 newPromise.ResetDepth();                 Internal.AddToHandleQueueBack(newPromise);                  Promise promise = newPromise;                 while (promiseFuncs.MoveNext())                 {                     promise = promise.Then(promiseFuncs.Current);                 }
                return promise;             }         }     } }